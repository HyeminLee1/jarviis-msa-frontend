{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emma0\\\\workspace\\\\jarviis-msa-frontend\\\\src\\\\features\\\\todo\\\\components\\\\TaskList.js\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport Button from '@mui/material/Button';\nimport { CompleteRequest, deleteTaskFailure, deleteTaskRequest } from \"../reducer/taskSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TaskList = ({\n  data\n}) => {\n  const [check, setCheck] = useState([data.completion]);\n  const dispatch = useDispatch();\n\n  function handleSubmit(data) {\n    async () => await dispatch(deleteTaskRequest({\n      id: data.id\n    }));\n\n    location.reload();\n  } //  console.log(data.id)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"c-cb\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"todo-0\",\n      type: \"checkbox\",\n      defaultChecked: data.completion,\n      onChange: () => {\n        dispatch(CompleteRequest({\n          id: data.id,\n          completion: !check\n        }));\n        setCheck(!check);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"todo-label\",\n      htmlFor: \"todo-0\",\n      children: data.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), check ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        class: \"rotate-center\",\n        style: {\n          width: '6%',\n          visibility: \"visible\",\n          float: \"right\"\n        },\n        src: require(\"features/todo/images/feedback.png\").default\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => {// dispatch(historyRequest(\n          //   {\n          //     log_date: new Date().toISOString(\"yyyy-mm-dd hh:MM:ss\"),\n          //     location: \"\",\n          //     address: \"\",\n          //     weather: \"\",\n          //     log_type: \"todo\",\n          //     contents: \"content 담아주세여\",\n          //     user_id: 1\n          //   }\n          // ))\n        },\n        children: \"\\uD788\\uC2A4\\uD1A0\\uB9AC\\uC5D0\\uB3C4 \\uCD94\\uAC00\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleSubmit,\n        children: \"\\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        width: '6%',\n        visibility: \"hidden\",\n        float: \"right\"\n      },\n      src: require(\"features/todo/images/feedback.png\").default\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\nTaskList.propTypes = {\n  data: PropTypes.object\n};\nexport default TaskList;","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis-msa-frontend/src/features/todo/components/TaskList.js"],"names":["PropTypes","React","useEffect","useState","useDispatch","Button","CompleteRequest","deleteTaskFailure","deleteTaskRequest","TaskList","data","check","setCheck","completion","dispatch","handleSubmit","id","location","reload","title","width","visibility","float","require","default","propTypes","object"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,iBAA7C,QAAsE,sBAAtE;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAE7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAACO,IAAI,CAACG,UAAN,CAAD,CAAlC;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AACA,WAASW,YAAT,CAAsBL,IAAtB,EAA2B;AACzB,gBAAW,MAAMI,QAAQ,CAACN,iBAAiB,CAAC;AAACQ,MAAAA,EAAE,EAACN,IAAI,CAACM;AAAT,KAAD,CAAlB,CAAzB;;AACAC,IAAAA,QAAQ,CAACC,MAAT;AACD,GAP4B,CAS/B;;;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACA;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAoB,MAAA,IAAI,EAAC,UAAzB;AAAoC,MAAA,cAAc,EAAER,IAAI,CAACG,UAAzD;AAAqE,MAAA,QAAQ,EAAE,MAAI;AACjFC,QAAAA,QAAQ,CAACR,eAAe,CAAC;AAACU,UAAAA,EAAE,EAAEN,IAAI,CAACM,EAAV;AAAcH,UAAAA,UAAU,EAAE,CAACF;AAA3B,SAAD,CAAhB,CAAR;AACAC,QAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACD;AAHD;AAAA;AAAA;AAAA;AAAA,YADA,eAKA;AAAO,MAAA,SAAS,EAAC,YAAjB;AAA8B,MAAA,OAAO,EAAC,QAAtC;AAAA,gBACGD,IAAI,CAACS;AADR;AAAA;AAAA;AAAA;AAAA,YALA,EAQCR,KAAK,gBAAG;AAAA,8BAAE;AAAK,QAAA,KAAK,EAAC,eAAX;AACD,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,UAAU,EAAE,SAA3B;AAAsCC,UAAAA,KAAK,EAAE;AAA7C,SADN;AAED,QAAA,GAAG,EAAEC,OAAO,CAAC,mCAAD,CAAP,CAA6CC;AAFjD;AAAA;AAAA;AAAA;AAAA,cAAF,eAGC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AACA,QAAA,OAAO,EAAE,MAAM,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,SAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAiBC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,OAAO,EAAET,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBD;AAAA,oBAAH,gBAoBN;AACA,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,UAAU,EAAE,QAA3B;AAAqCC,QAAAA,KAAK,EAAE;AAA5C,OADP;AAEA,MAAA,GAAG,EAAEC,OAAO,CAAC,mCAAD,CAAP,CAA6CC;AAFlD;AAAA;AAAA;AAAA;AAAA,YA5BA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA7CD;;AA+CAf,QAAQ,CAACgB,SAAT,GAAqB;AACnBf,EAAAA,IAAI,EAAEV,SAAS,CAAC0B;AADG,CAArB;AAIA,eAAejB,QAAf","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState }  from \"react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport Button from '@mui/material/Button';\r\nimport { CompleteRequest, deleteTaskFailure, deleteTaskRequest } from \"../reducer/taskSlice\";\r\n\r\nconst TaskList = ({ data }) => {\r\n  \r\n  const [check, setCheck] = useState([data.completion])\r\n  const dispatch = useDispatch()\r\n  function handleSubmit(data){\r\n    async() => await dispatch(deleteTaskRequest({id:data.id})); \r\n    location.reload()\r\n  }\r\n\r\n//  console.log(data.id)\r\n  return (\r\n    <div className=\"c-cb\">\r\n    <input  id=\"todo-0\" type=\"checkbox\" defaultChecked={data.completion} onChange={()=>{\r\n      dispatch(CompleteRequest({id: data.id, completion: !check}))\r\n      setCheck(!check)\r\n    }}/>\r\n    <label className=\"todo-label\" htmlFor=\"todo-0\">\r\n      {data.title}\r\n    </label>\r\n    {check ? <><img class=\"rotate-center\"\r\n              style={{ width: '6%', visibility: \"visible\", float: \"right\" }}\r\n              src={require(\"features/todo/images/feedback.png\").default} />\r\n              <Button variant=\"outlined\" \r\n              onClick={() => {\r\n                // dispatch(historyRequest(\r\n                //   {\r\n                //     log_date: new Date().toISOString(\"yyyy-mm-dd hh:MM:ss\"),\r\n                //     location: \"\",\r\n                //     address: \"\",\r\n                //     weather: \"\",\r\n                //     log_type: \"todo\",\r\n                //     contents: \"content 담아주세여\",\r\n                //     user_id: 1\r\n                //   }\r\n                // ))\r\n              }}>히스토리에도 추가하기</Button>\r\n              <Button variant=\"outlined\" onClick={handleSubmit} >삭제</Button>\r\n            </>\r\n    :\r\n    <img \r\n    style={{ width: '6%', visibility: \"hidden\", float: \"right\" }}\r\n    src={require(\"features/todo/images/feedback.png\").default}\r\n    />}\r\n  </div>   \r\n  );\r\n};\r\n\r\nTaskList.propTypes = {\r\n  data: PropTypes.object,\r\n};\r\n\r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}