{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\"; //받아오는 데이터//\n\nconst initialState = {\n  eventLoading: false,\n  eventData: null,\n  error: null\n};\nconst eventSlice = createSlice({\n  name: \"events\",\n  initialState,\n  reducers: {\n    //suggestion\n    eventRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    eventSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    eventFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정필요(디테일 확인해야함)\n    CompleteRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    CompleteSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    CompleteFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    addTaskRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    addTaskSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    addTaskFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    deleteTaskRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    deleteTaskSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    deleteTaskFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    task: eventSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = eventSlice;\nexport const {\n  eventRequest,\n  eventSuccess,\n  eventFailure,\n  CompleteRequest,\n  CompleteSuccess,\n  CompleteFailure,\n  addTaskRequest,\n  addTaskSuccess,\n  addTaskFailure,\n  deleteTaskRequest,\n  deleteTaskSuccess,\n  deleteTaskFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis-msa-frontend/src/features/calendar/reducer/calendarSlice.ts"],"names":["configureStore","createSlice","initialState","eventLoading","eventData","error","eventSlice","name","reducers","eventRequest","state","_action","eventSuccess","action","payload","eventFailure","CompleteRequest","CompleteSuccess","CompleteFailure","addTaskRequest","addTaskSuccess","addTaskFailure","deleteTaskRequest","deleteTaskSuccess","deleteTaskFailure","store","reducer","task","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n//받아오는 데이터//\nexport interface eventDataPayload {\n  data:[\n    id: number,\n    user_id: number,\n    created: string,\n    update: string,\n    classification: string,\n    type: string,\n    title: string,\n    start: string,\n    end: string,\n    location: string,\n    completion: string,\n    description: string\n  ]\n}\n\n\n//요청하는 데이터\n\n\nexport interface completionPayload {\n  id:number;\n  completion: boolean;\n}\n\nexport interface addEventPayload{\n  user_id: number,\n  classification: string,\n  title: string,\n  start: string,\n  end: string,\n  location: string, \n  completion: string, \n  description: string, \n}\n\n\n//미들웨어\nexport interface eventState {\n  eventLoading: boolean;\n  eventData: any;\n  error: any;\n}\n\n// api의 param 타입\nexport interface idParamType {\n  id: number;\n}\nexport interface UserParamType {\n  user_id: number;\n}\n\n\n\nconst initialState: eventState = {\n  eventLoading : false,\n  eventData: null,\n  error: null,\n};\n\nconst eventSlice = createSlice({\n  name: \"events\",\n  initialState,\n  reducers: {\n\n    //suggestion\n    eventRequest(state: eventState, _action: PayloadAction<UserParamType>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    eventSuccess(state: eventState, action: PayloadAction<eventDataPayload>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    eventFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정필요(디테일 확인해야함)\n    CompleteRequest(state: eventState, _action: PayloadAction<completionPayload>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    CompleteSuccess(state: eventState, action: PayloadAction<completionPayload>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    CompleteFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n    addTaskRequest(state: eventState, _action: PayloadAction<addEventPayload>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    addTaskSuccess(state: eventState, action: PayloadAction<addEventPayload>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    addTaskFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },    \n    deleteTaskRequest(state: eventState, _action: PayloadAction<idParamType>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    deleteTaskSuccess(state: eventState, action: PayloadAction<idParamType>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    deleteTaskFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n  }\n})\n\nconst store = configureStore({\n  reducer: {\n      task: eventSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = eventSlice;\n\nexport const {\n  eventRequest,\n  eventSuccess,\n  eventFailure,\n  CompleteRequest,\n  CompleteSuccess,\n  CompleteFailure,\n  addTaskRequest,\n  addTaskSuccess,\n  addTaskFailure,\n  deleteTaskRequest,\n  deleteTaskSuccess,\n  deleteTaskFailure\n} = actions;\n\nexport default reducer;\n    \n\n"]},"metadata":{},"sourceType":"module"}